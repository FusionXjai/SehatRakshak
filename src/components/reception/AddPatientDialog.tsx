import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Upload, Loader2 } from "lucide-react";

interface AddPatientDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
  autoAssignDoctorId?: string; // Auto-assign doctor when opened from doctor dashboard
}

const AddPatientDialog = ({ open, onOpenChange, onSuccess, autoAssignDoctorId }: AddPatientDialogProps) => {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [photoFile, setPhotoFile] = useState<File | null>(null);
  const [idProofFile, setIdProofFile] = useState<File | null>(null);
  const [doctors, setDoctors] = useState<any[]>([]);
  
  const [formData, setFormData] = useState({
    full_name: "",
    gender: "male",
    date_of_birth: "",
    mobile: "",
    email: "",
    address: "",
    blood_group: "",
    allergies: "",
    emergency_contact_name: "",
    emergency_contact_mobile: "",
    assigned_doctor_id: "none", // Default to "none"
  });

  useEffect(() => {
    if (open) {
      fetchDoctors();
      // Auto-assign doctor if provided
      if (autoAssignDoctorId) {
        setFormData(prev => ({ ...prev, assigned_doctor_id: autoAssignDoctorId }));
      }
    }
  }, [open, autoAssignDoctorId]);

  const fetchDoctors = async () => {
    try {
      // Get all active doctors
      const { data: doctorsData, error: doctorsError } = await (supabase as any)
        .from('doctors')
        .select('id, user_id, specialization')
        .eq('is_active', true);

      if (doctorsError) throw doctorsError;

      // Get profiles for these doctors
      const userIds = doctorsData?.map((d: any) => d.user_id) || [];
      
      if (userIds.length === 0) {
        setDoctors([]);
        return;
      }

      const { data: profilesData, error: profilesError } = await supabase
        .from('profiles')
        .select('id, full_name')
        .in('id', userIds);

      if (profilesError) throw profilesError;

      // Merge doctors with their profiles
      const doctorsWithProfiles = doctorsData.map((doctor: any) => {
        const profile = profilesData?.find((p) => p.id === doctor.user_id);
        return {
          ...doctor,
          profiles: profile,
        };
      });

      setDoctors(doctorsWithProfiles || []);
    } catch (error) {
      console.error('Error fetching doctors:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // Get current user
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("Not authenticated");

      let photo_url = null;
      let id_proof_url = null;

      // Upload photo if provided
      if (photoFile) {
        const photoPath = `${user.id}/${Date.now()}-${photoFile.name}`;
        const { error: photoError } = await supabase.storage
          .from('patient-documents')
          .upload(photoPath, photoFile);
        
        if (photoError) throw photoError;
        photo_url = photoPath;
      }

      // Upload ID proof if provided
      if (idProofFile) {
        const idProofPath = `${user.id}/${Date.now()}-${idProofFile.name}`;
        const { error: idProofError } = await supabase.storage
          .from('patient-documents')
          .upload(idProofPath, idProofFile);
        
        if (idProofError) throw idProofError;
        id_proof_url = idProofPath;
      }

      // Create patient record
      const patientData: any = {
        full_name: formData.full_name,
        gender: formData.gender,
        date_of_birth: formData.date_of_birth,
        mobile: formData.mobile,
        email: formData.email || null,
        address: formData.address || null,
        blood_group: formData.blood_group || null,
        allergies: formData.allergies ? formData.allergies.split(',').map(a => a.trim()) : [],
        emergency_contact_name: formData.emergency_contact_name || null,
        emergency_contact_mobile: formData.emergency_contact_mobile || null,
        photo_url,
        id_proof_url,
        created_by: user.id,
        mrn: '', // Will be auto-generated by trigger
        qr_code_id: '', // Will be auto-generated by trigger
      };

      // Only add assigned_doctor_id if a valid doctor is selected
      console.log('Before insert - assigned_doctor_id:', formData.assigned_doctor_id);
      
      if (formData.assigned_doctor_id && formData.assigned_doctor_id !== '' && formData.assigned_doctor_id !== 'none') {
        console.log('Adding doctor ID to patient data:', formData.assigned_doctor_id);
        patientData.assigned_doctor_id = formData.assigned_doctor_id;
      } else {
        console.log('Skipping doctor assignment - value is:', formData.assigned_doctor_id);
      }

      console.log('Final patient data:', patientData);
      const { error } = await supabase.from('patients').insert(patientData);

      if (error) throw error;

      toast({
        title: "Success",
        description: "Patient added successfully",
      });

      onSuccess();
      resetForm();
    } catch (error: any) {
      toast({
        title: "Error adding patient",
        description: error.message,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      full_name: "",
      gender: "male",
      date_of_birth: "",
      mobile: "",
      email: "",
      address: "",
      blood_group: "",
      allergies: "",
      emergency_contact_name: "",
      emergency_contact_mobile: "",
      assigned_doctor_id: "none", // Reset to "none"
    });
    setPhotoFile(null);
    setIdProofFile(null);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Add New Patient</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Personal Information */}
          <div className="space-y-4">
            <h3 className="font-semibold text-sm">Personal Information</h3>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="full_name">Full Name *</Label>
                <Input
                  id="full_name"
                  value={formData.full_name}
                  onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}
                  required
                />
              </div>

              <div>
                <Label htmlFor="gender">Gender *</Label>
                <Select value={formData.gender} onValueChange={(value) => setFormData({ ...formData, gender: value })}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Male</SelectItem>
                    <SelectItem value="female">Female</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="date_of_birth">Date of Birth *</Label>
                <Input
                  id="date_of_birth"
                  type="date"
                  value={formData.date_of_birth}
                  onChange={(e) => setFormData({ ...formData, date_of_birth: e.target.value })}
                  required
                />
              </div>

              <div>
                <Label htmlFor="mobile">Mobile *</Label>
                <Input
                  id="mobile"
                  type="tel"
                  value={formData.mobile}
                  onChange={(e) => setFormData({ ...formData, mobile: e.target.value })}
                  required
                />
              </div>

              <div>
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                />
              </div>

              <div>
                <Label htmlFor="blood_group">Blood Group</Label>
                <Input
                  id="blood_group"
                  value={formData.blood_group}
                  onChange={(e) => setFormData({ ...formData, blood_group: e.target.value })}
                  placeholder="e.g., A+, O-, AB+"
                />
              </div>

              <div>
                <Label htmlFor="assigned_doctor">Assign Doctor</Label>
                <Select 
                  value={formData.assigned_doctor_id} 
                  onValueChange={(value) => {
                    console.log('Doctor selected:', value);
                    setFormData({ ...formData, assigned_doctor_id: value });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select doctor (optional)" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">No Doctor</SelectItem>
                    {doctors.map((doctor) => (
                      <SelectItem key={doctor.id} value={doctor.id}>
                        {doctor.profiles?.full_name} - {doctor.specialization}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <Label htmlFor="address">Address</Label>
              <Textarea
                id="address"
                value={formData.address}
                onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                rows={2}
              />
            </div>

            <div>
              <Label htmlFor="allergies">Allergies (comma-separated)</Label>
              <Input
                id="allergies"
                value={formData.allergies}
                onChange={(e) => setFormData({ ...formData, allergies: e.target.value })}
                placeholder="e.g., Penicillin, Peanuts"
              />
            </div>
          </div>

          {/* Emergency Contact */}
          <div className="space-y-4">
            <h3 className="font-semibold text-sm">Emergency Contact</h3>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="emergency_contact_name">Contact Name</Label>
                <Input
                  id="emergency_contact_name"
                  value={formData.emergency_contact_name}
                  onChange={(e) => setFormData({ ...formData, emergency_contact_name: e.target.value })}
                />
              </div>

              <div>
                <Label htmlFor="emergency_contact_mobile">Contact Mobile</Label>
                <Input
                  id="emergency_contact_mobile"
                  type="tel"
                  value={formData.emergency_contact_mobile}
                  onChange={(e) => setFormData({ ...formData, emergency_contact_mobile: e.target.value })}
                />
              </div>
            </div>
          </div>

          {/* Documents */}
          <div className="space-y-4">
            <h3 className="font-semibold text-sm">Documents</h3>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="photo">Patient Photo</Label>
                <div className="mt-2">
                  <Input
                    id="photo"
                    type="file"
                    accept="image/*"
                    onChange={(e) => setPhotoFile(e.target.files?.[0] || null)}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="id_proof">ID Proof</Label>
                <div className="mt-2">
                  <Input
                    id="id_proof"
                    type="file"
                    accept="image/*,application/pdf"
                    onChange={(e) => setIdProofFile(e.target.files?.[0] || null)}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-end gap-3 pt-4">
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
              Add Patient
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default AddPatientDialog;
